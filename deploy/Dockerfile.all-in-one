# Docker build for all-in-one Stratos
# ---------------------------------------------------------------------------------------------------
FROM splatform/stratos-aio-base:leap15_1 as jetstream-builder

# Ensure that we copy the custom-src folder
COPY --chown=stratos:users . ./
COPY --chown=stratos:users deploy/tools/generate_cert.sh generate_cert.sh
COPY --chown=stratos:users deploy/all-in-one/config.all-in-one.properties config.properties

ARG USE_PREBUILT_UI=false

USER root
RUN if [ $USE_PREBUILT_UI = "true" ] ; then \
    unzip stratos-frontend-prebuild.zip -d ./dist ; \
    else \
		npm install \
        && npm run build ; \
    fi

# Build backend
RUN npm run build-backend \
    && cp src/jetstream/jetstream . \
    && mv dist ui

USER stratos

# Generate dev-certs
RUN CERTS_PATH=/home/stratos/dev-certs ./generate_cert.sh

# ---------------------------------------------------------------------------------------------------
# Docker build for FDB Server component
FROM splatform/stratos-bk-build-base:leap15_1 as fdbserver-builder


# Install FoundationDB Binaries
ARG FDB_VERSION=6.2.15
ARG FDB_WEBSITE=https://www.foundationdb.org

USER root
WORKDIR /home/stratos/tmp
WORKDIR /home/stratos
RUN pwd && ls -al
RUN curl $FDB_WEBSITE/downloads/$FDB_VERSION/linux/fdb_$FDB_VERSION.tar.gz -o fdb_$FDB_VERSION.tar.gz && \
	tar -xzf fdb_$FDB_VERSION.tar.gz --strip-components=1 && \
	rm fdb_$FDB_VERSION.tar.gz && \
	chmod u+x fdbbackup fdbcli fdbdr fdbmonitor fdbrestore fdbserver backup_agent dr_agent && \
	mv fdbbackup fdbcli fdbdr fdbmonitor fdbrestore fdbserver backup_agent dr_agent /usr/bin

WORKDIR /var/fdb

# Install FoundationDB Client Libraries

ARG FDB_VERSION=6.2.15
ARG FDB_ADDITIONAL_VERSIONS="5.1.7"
ARG FDB_WEBSITE=https://www.foundationdb.org

COPY deploy/containers/monocular/fdb-server/download_multiversion_libraries.bash scripts/

# Set Up Runtime Scripts and Directories
COPY deploy/containers/monocular/fdb-server/fdb.bash scripts/
COPY deploy/containers/monocular/fdb-server/create_server_environment.bash scripts/
COPY deploy/containers/monocular/fdb-server/create_cluster_file.bash scripts/
COPY deploy/containers/monocular/fdb-server/configure_db.bash scripts/
RUN chmod u+x scripts/*.bash && \
	mkdir -p logs

# ---------------------------------------------------------------------------------------------------
# Docker build for FDB Document Layer component
FROM splatform/stratos-bk-build-base:leap15_1 as fdbdoclayer-builder

# Install FoundationDB Document Layer Binaries
ARG FDB_DOC_VERSION=1.6.3
ARG FDB_WEBSITE=https://www.foundationdb.org

WORKDIR /home/stratos
RUN curl $FDB_WEBSITE/downloads/$FDB_DOC_VERSION/linux/fdb-document-layer-$FDB_DOC_VERSION-Linux.tar.gz -o fdb-document-layer-$FDB_DOC_VERSION-Linux.tar.gz && \
    tar -xvf fdb-document-layer-$FDB_DOC_VERSION-Linux.tar.gz && \
    mv fdb-document-layer-$FDB_DOC_VERSION-Linux doclayer
 
# ---------------------------------------------------------------------------------------------------
# Docker build for Chart Repo component
FROM splatform/stratos-bk-build-base:leap15_1 as chartrepo-builder

COPY --chown=stratos:users src/jetstream/plugins/monocular/chart-repo /go/src/github.com/helm/monocular
WORKDIR /go/src/github.com/helm/monocular
ARG VERSION
RUN GO111MODULE=on GOPROXY=https://gocenter.io CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-X main.version=$VERSION" .

# ---------------------------------------------------------------------------------------------------
# use --target=aio to build All-in-one image
FROM splatform/stratos-bk-base:leap15_1
ARG CANARY_BUILD
COPY --from=jetstream-builder /home/stratos/deploy/db /src/deploy/db
COPY --from=jetstream-builder /home/stratos/dev-certs /srv/dev-certs
COPY --from=jetstream-builder /home/stratos/ui /srv/ui
COPY --from=jetstream-builder /home/stratos/jetstream /srv/jetstream
RUN chmod +x /srv/jetstream
COPY --from=jetstream-builder /home/stratos/config.properties /srv/config.properties

# User Invite templates
COPY --from=jetstream-builder /home/stratos/src/jetstream/templates /srv/templates

# Pull in binaries from fdbserver-builder
COPY --from=fdbserver-builder /usr/bin /usr/bin
COPY --from=fdbserver-builder /var/fdb/scripts /var/fdb/scripts

# Install FoundationDB Client Libraries directly here rather than in the fdbserver-builder, as the install destination depends on an external script.
ARG FDB_VERSION=6.2.15
ARG FDB_ADDITIONAL_VERSIONS="5.1.7"
ARG FDB_WEBSITE=https://www.foundationdb.org
RUN mkdir -p /mnt/website
RUN curl $FDB_WEBSITE/downloads/$FDB_VERSION/linux/libfdb_c_$FDB_VERSION.so -o /usr/lib64/libfdb_c.so && \
	bash /var/fdb/scripts/download_multiversion_libraries.bash $FDB_WEBSITE $FDB_ADDITIONAL_VERSIONS && \
	rm -rf /mnt/website
VOLUME /var/fdb/data
RUN mkdir -p /var/fdb/logs

# Pull in binaries from fdbdoclayer-builder
COPY --from=fdbdoclayer-builder /home/stratos/doclayer/bin/fdbdoc /usr/bin/fdbdoc
COPY --from=fdbdoclayer-builder /home/stratos/doclayer/lib/foundationdb/document/fdbmonitor /usr/bin/fdbmonitor
# Bring in doclayer startup script
COPY deploy/containers/monocular/fdb-doclayer/fdbdoc.bash /var/fdb/scripts
RUN chmod u+x /var/fdb/scripts/fdbdoc.bash
# Doclayer startup script dependency
# FoundationDB environment variables
ENV FDB_PORT 4500
ENV FDB_CLUSTER_FILE /var/fdb/fdb.cluster
# Set to host, since all processes run in single container
ENV FDB_NETWORKING_MODE host 
ENV FDB_COORDINATOR_PORT 4500
ENV FDB_PROCESS_CLASS unset
ENV CLUSTER_ID docker:docker
ENV FDB_COORDINATOR localhost
ENV FDB_DOC_PORT 27016

# Pull in binaries from chartrepo-builder
COPY --from=chartrepo-builder /go/src/github.com/helm/monocular/chartrepo /chartrepo

# Enable persistence features if canary build flag is set
RUN if [ "x$CANARY_BUILD" != "x" ] ; then printf "\nFORCE_ENABLE_PERSISTENCE_FEATURES=true\n" >> /srv/config.properties ; fi

# Enable tech preview features if canary build flag is set
RUN if [ "x$CANARY_BUILD" != "x" ] ; then printf "\nENABLE_TECH_PREVIEW=true\n" >> /srv/config.properties ; fi

EXPOSE 443

# Need to be root to bind to port 443
USER root

COPY deploy/aio-entrypoint.sh .
RUN chmod +x ./aio-entrypoint.sh
ENTRYPOINT ["bash", "-c", "./aio-entrypoint.sh -u mongodb://localhost:${FDB_DOC_PORT}"]
